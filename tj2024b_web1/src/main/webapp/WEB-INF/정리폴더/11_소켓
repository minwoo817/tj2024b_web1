[ HTTP ] : 이동 문자 전송 규약 
[ WS ] : websocket
	1. 정의 : ws 프로토콜을 기반으로 클라이언트 와 서버 사이에 지속적인 양방향 연결 이용한 통신
	2. 특징
		- WS(상태유지) : 지속적인 양방향 연결 , 상태 유지 , 저장 O
			1. 클라이언트가 서버로부터 연결 신청 
			2. 연결된 상태를 유지하고 지속적인 양방향 통신 요청 구조
			- 사용처 : 1.실시간 양방향통신(채팅/알림)
			
		- HTTP(무상태) : 무상태 , 저장 X
			1. 클라이언트가 요청(request) 하고 서버가(response) 하는 통신구조, 
			2. HTTP 는 요청이 있어야만 응답이 존재한다.
			- 사용처 : 1.HTML(웹페이지) 통신 , 2. REST(자료) 통신  
			
	3. 소켓 : 통신의 종착점(엔드포인트 = 통신 주고 받을때 도착 지점) 
		- 클라이언트 소켓이 서버 소켓으로 부터 최초 연결 요청
	4. 구조 
		-클라이언트 소켓							-서버 소켓 
		1. 클라이언트 소켓 에서 서버 소켓으로 연결(접속) 요청 
		2. 서버 소켓이 클라이언트 소켓의 요청을 등록(바인딩)
		================================================================
		3. 서버 소켓에 등록된(상태유지) 클라이언트 소켓이 서버소켓 에게 메시지 전송
		4. 서버 소켓이 클라이언트 소켓으로 부터 메시지를 받아 서비스(로직) 처리 
		================================================================
		3. 서버 소켓에 등록된(상태유지) 서버 소켓이 클라이언트 에게 부터 메시지 전송 
		4. 클라이언트 소켓이 서버 소켓으로 부터 메시지를 받아 서비스(로직) 처리 
	5. 라이브러리 
		1. JS (클라이언트)웹 소켓 내장 라이브러리
			WebSocket 클래스 
				1. 속성 * 각 속성을 제공 받고 각 속성에 어떠한 이벤트(함수) 실행할지 개발자 구현 
					.onmessage 	: 웹 소켓이 메시지를 받을때 (자동) 실행되는 속성  
						- .onmessage = ( e ) => { 메시지받았때 로직 구현  }
					
					.onopen		: 웹 소켓이 서버 소켓과 연결/접속 성공 했을때 (자동) 실행되는 속성 
						- .onopen = ( e ) => { 서버소켓과 접속 성공시 로직 구현 }
						
					.onclose	: 웹 소켓이 서버 소켓과 연결/접속에 닫았을때 (자동) 실행되는 속성 
						- .onclose = ( e ) => { 서버와 연결이 닫혔을때 로직 구현 }
					
					.onerror	: 웹 소켓이 서버 소켓과 연결/접속에 오류 발했을때 (자동) 실행되는 속성 
						- .onerror = ( e ) => { 서버와 연결에 오류가 발생 했을때 로직 구현 }
				2. 메소드 
					.send( )	: 연결 된 서버소켓에게 메시지를 보낼때 사용되는 함수 , 텍스트(문자) 타입 , 객체 = JSON타입변환 필요					
	
		2. Servlet (서버) 웹 소켓 내장 라이브러리
				1. 주요 메소드 
					@OnOpen public void onOpen( Session session ){ 클라이언트 소켓이 접속했을대 로직 구현 }
					@OnMessage public void onMessage( Session session , String message ) { 클라이언트 소켓이 메시지 보내 왔을때 로직 구현 }
					@onClose public void onClose( Session session ){ 클라이언트 소켓과 연결이 닫혔을때 로직 구현  }
					@onError public void onError( Session session ){ 클라이언트 소켓과 에러가 발생했을대 로직 구현 }
				
* [ 동기식 통신 vs 비동기식 통신 ]
	- 생활속 예시] 
		1. 신동엽이 커피,빵,스무디 주문(요청) 하고 진동벨(3번) 받는다.
		2. 강호동이 커피 주문(요청) 하고 진동벨(4번) 받는다.
		[1] 비동기식은 요청 을 보내고 응답이 올때까지 대기 상태를 만들지 않는다.
		[2] 동기식은 요청 을 보내고 응답이 올때까지 다음 요청을 받지 않고 대기 상태를 만든다.
	1. 비동기식 통신 사용처 : fetch 함수 , socket 함수
	2. 비동기식 통신은 요청(함수 실행) 응답 올때까지 대기상태가 아닌 다음 JS 코드를 실행한다.














	
	
	

	
		
	